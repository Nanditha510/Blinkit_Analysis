--BLINKIT ANALYSIS SQL QUERIES--

CREATE DATABASE blinkit; -- database name 
use blinkit; -- using the above database called blinkit

select * from blinkit_dd; -- it shows entire table
select COUNT(*) from blinkit_dd;

SHOW CREATE TABLE blinkit_dd;

ALTER TABLE blinkit_dd
CHANGE COLUMN `ï»¿Item Fat Content` Item_Fat_Content TEXT;

set sql_safe_updates = 0;

UPDATE blinkit_dd
SET Item_Fat_Content = 
    CASE 
        WHEN Item_Fat_Content IN ('LF', 'low fat') THEN 'Low Fat'
        WHEN Item_Fat_Content = 'reg' THEN 'Regular'
        ELSE Item_Fat_Content
    END;

select distinct(Item_Fat_Content) from blinkit_dd; -- it shows the rows name we have after filtered

-- from here actually going with the project
use blinkit;

SELECT SUM(`Total Sales`) as total_sales -- it change the column name as thats all
FROM  blinkit_dd; -- (``)Column/table names with spaces

SELECT CAST(SUM(`Total Sales`)/1000000 AS DECIMAL(10, 2)) AS total_sales_million -- we just reduced the decimal points and showed it in million
FROM  blinkit_dd;

select CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales from blinkit_dd; -- as avg_sales is the name i given to show like that ok

select COUNT(*) AS No_of_items from blinkit_dd;

SELECT CAST(SUM(`Total Sales`)/1000000 AS DECIMAL(10, 2)) AS total_sales_million 
FROM  blinkit_dd
WHERE Item_Fat_Content = 'Low Fat';

SELECT CAST(SUM(`Total Sales`)/1000000 AS DECIMAL(10, 2)) AS total_sales_million 
FROM  blinkit_dd
WHERE `Outlet Establishment Year` = 2022;

select COUNT(*) AS No_of_items from blinkit_dd
WHERE `Outlet Establishment Year` = 2022;

select CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales from blinkit_dd
WHERE `Outlet Establishment Year` = 2022;

-- avg rating --
select CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating from blinkit_dd;


-- granular requirement
use blinkit;

select Item_Fat_Content, SUM(`Total Sales`) AS Total_Sales
FROM blinkit_dd
GROUP BY Item_Fat_Content;

select Item_Fat_Content, SUM(`Total Sales`) AS Total_Sales
FROM blinkit_dd
GROUP BY Item_Fat_Content
ORDER BY Total_Sales DESC;

select Item_Fat_Content, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY Item_Fat_Content
ORDER BY Total_Sales DESC;

select Item_Fat_Content, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
WHERE `Outlet Establishment Year` = 2022
GROUP BY Item_Fat_Content
ORDER BY Total_Sales DESC;

-- TOTAL SALES BY ITEM 
select `Item Type`, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY `Item Type`
ORDER BY Total_Sales DESC;

select `Item Type`, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY `Item Type`
ORDER BY Total_Sales DESC
limit 5; -- it only prints top 5 item types

-- fat content by outlet for total sales
select `Outlet Location Type`, `Item_Fat_Content`, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY `Outlet Location Type`, `Item_Fat_Content`
ORDER BY Total_Sales DESC;

SELECT 
    `Outlet Location Type`,
    SUM(CASE WHEN Item_Fat_Content = 'Low Fat' THEN `Total Sales` ELSE 0 END) AS Low_Fat,
    SUM(CASE WHEN Item_Fat_Content = 'Regular' THEN `Total Sales` ELSE 0 END) AS Regular
FROM blinkit_dd
GROUP BY `Outlet Location Type`
ORDER BY `Outlet Location Type`;

select `Outlet Establishment Year`,  
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales
FROM blinkit_dd
GROUP BY `Outlet Establishment Year`
ORDER BY `Outlet Establishment Year` DESC;

select `Outlet Establishment Year`, 
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
       CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY `Outlet Establishment Year`
ORDER BY Total_Sales DESC;

--  Percentage of Sales by Outlet Size
SELECT 
    `Outlet Size`, 
    CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
    CAST(
        (SUM(`Total Sales`) * 100.0 / SUM(SUM(`Total Sales`)) OVER()) 
        AS DECIMAL(10,2)
    ) AS Sales_Percentage
FROM blinkit_dd
GROUP BY `Outlet Size`
ORDER BY Total_Sales DESC;

-- Sales by Outlet Location
SELECT `Outlet Location Type`,
       CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
        CAST(avg(`Total Sales`) AS DECIMAL(10, 0)) as avg_sales,
       COUNT(*) AS No_of_items,
       CAST(avg(Rating) AS DECIMAL(10,2)) as avg_rating
FROM blinkit_dd
GROUP BY `Outlet Location Type`
ORDER BY Total_Sales DESC;

-- All Metrics by Outlet Type:
SELECT `Outlet Type`, 
CAST(SUM(`Total Sales`) AS DECIMAL(10,2)) AS Total_Sales,
		CAST(AVG(`Total Sales`) AS DECIMAL(10,0)) AS Avg_Sales,
		COUNT(*) AS No_Of_Items,
		CAST(AVG(Rating) AS DECIMAL(10,2)) AS Avg_Rating,
		CAST(AVG(`Item Visibility`) AS DECIMAL(10,2)) AS Item_Visibility
FROM blinkit_dd
GROUP BY `Outlet Type`
ORDER BY Total_Sales DESC










